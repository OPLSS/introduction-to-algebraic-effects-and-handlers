(* The queens problem using ambivalent choice. *)

type queen = int * int

effect Select : int list -> int
effect Fail : unit -> empty

(* Do the given queens attack each other? *)
let no_attack (x,y) (x',y') =
  x <> x' && y <> y' && abs (x - x') <> abs (y - y')
;;

(* Given that queens qs are already placed, return the list of
   rows in column x which are not attacked yet. *)
let available x qs =
  filter (fun y -> forall (no_attack (x,y)) qs) [1;2;3;4;5;6;7;8]
;;

(* Solve the queens problem by guessing what to do *)
let queens n =
  let rec place x qs =
    if x = 9 then
      qs
    else
      let y = perform (Select (available x qs)) in
      place (x+1) ((x,y) :: qs)
  in
  place 1 []

(* A handler for ambivalent choice which uses depth-first search *)
let dfs = handler
  | v -> v
  | effect (Select lst) k ->
     let rec tryem = function
       | [] -> (match perform (Fail ()) with)
       | x::xs -> (handle k x with effect (Fail ()) _ -> tryem xs)
     in
     tryem lst
;;

(* And we can solve the problem: *)
let solution =
  with dfs handle queens 8
;;
